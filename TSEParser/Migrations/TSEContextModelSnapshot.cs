// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TSEParser;

#nullable disable

namespace TSEParser.Migrations
{
    [DbContext(typeof(TSEContext))]
    partial class TSEContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TSEParser.Candidato", b =>
                {
                    b.Property<byte>("Cargo")
                        .HasColumnType("tinyint");

                    b.Property<int>("NumeroCandidato")
                        .HasColumnType("int");

                    b.Property<string>("UFSigla")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Cargo", "NumeroCandidato", "UFSigla");

                    b.HasIndex("UFSigla");

                    b.ToTable("Candidato");
                });

            modelBuilder.Entity("TSEParser.DefeitosSecao", b =>
                {
                    b.Property<int>("MunicipioCodigo")
                        .HasColumnType("int");

                    b.Property<short>("CodigoZonaEleitoral")
                        .HasColumnType("smallint");

                    b.Property<short>("CodigoSecao")
                        .HasColumnType("smallint");

                    b.Property<bool>("ArquivoBUCorrompido")
                        .HasColumnType("bit");

                    b.Property<bool>("ArquivoBUFaltando")
                        .HasColumnType("bit");

                    b.Property<bool>("ArquivoBUeIMGBUDiferentes")
                        .HasColumnType("bit");

                    b.Property<bool>("ArquivoIMGBUCorrompido")
                        .HasColumnType("bit");

                    b.Property<bool>("ArquivoIMGBUFaltando")
                        .HasColumnType("bit");

                    b.Property<bool>("ArquivoLOGJEZFaltando")
                        .HasColumnType("bit");

                    b.Property<bool>("ArquivoRDVCorrompido")
                        .HasColumnType("bit");

                    b.Property<bool>("ArquivoRDVFaltando")
                        .HasColumnType("bit");

                    b.Property<int>("CodigoIdentificacaoUrnaEletronicaBU")
                        .HasColumnType("int");

                    b.Property<bool>("DiferencaVotosBUeIMGBU")
                        .HasColumnType("bit");

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.Property<bool>("Rejeitado")
                        .HasColumnType("bit");

                    b.Property<bool>("SemArquivo")
                        .HasColumnType("bit");

                    b.HasKey("MunicipioCodigo", "CodigoZonaEleitoral", "CodigoSecao");

                    b.ToTable("DefeitosSecao");
                });

            modelBuilder.Entity("TSEParser.Municipio", b =>
                {
                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<short>("FusoHorario")
                        .HasColumnType("smallint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("UFSigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.HasKey("Codigo");

                    b.HasIndex("UFSigla");

                    b.ToTable("Municipio");
                });

            modelBuilder.Entity("TSEParser.Partido", b =>
                {
                    b.Property<byte>("Numero")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Numero");

                    b.ToTable("Partido");
                });

            modelBuilder.Entity("TSEParser.Regiao", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Regiao");

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Nome = "Brasil"
                        },
                        new
                        {
                            Id = (byte)1,
                            Nome = "Sul"
                        },
                        new
                        {
                            Id = (byte)2,
                            Nome = "Sudeste"
                        },
                        new
                        {
                            Id = (byte)3,
                            Nome = "Centro-oeste"
                        },
                        new
                        {
                            Id = (byte)4,
                            Nome = "Norte"
                        },
                        new
                        {
                            Id = (byte)5,
                            Nome = "Nordeste"
                        },
                        new
                        {
                            Id = (byte)6,
                            Nome = "Exterior"
                        });
                });

            modelBuilder.Entity("TSEParser.SecaoEleitoral", b =>
                {
                    b.Property<int>("MunicipioCodigo")
                        .HasColumnType("int");

                    b.Property<short>("CodigoZonaEleitoral")
                        .HasColumnType("smallint");

                    b.Property<short>("CodigoSecao")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("AberturaUELog")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("AberturaUrnaEletronica")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("CodigoIdentificacaoUrnaEletronica")
                        .HasColumnType("int");

                    b.Property<int>("CodigoIdentificacaoUrnaEletronicaLog")
                        .HasColumnType("int");

                    b.Property<short>("CodigoLocalVotacao")
                        .HasColumnType("smallint");

                    b.Property<short>("Comparecimento")
                        .HasColumnType("smallint");

                    b.Property<short>("DE_Brancos")
                        .HasColumnType("smallint");

                    b.Property<short>("DE_EleitoresAptos")
                        .HasColumnType("smallint");

                    b.Property<short>("DE_Nulos")
                        .HasColumnType("smallint");

                    b.Property<short>("DE_Total")
                        .HasColumnType("smallint");

                    b.Property<short>("DE_VotosLegenda")
                        .HasColumnType("smallint");

                    b.Property<short>("DE_VotosNominais")
                        .HasColumnType("smallint");

                    b.Property<short>("DF_Brancos")
                        .HasColumnType("smallint");

                    b.Property<short>("DF_EleitoresAptos")
                        .HasColumnType("smallint");

                    b.Property<short>("DF_Nulos")
                        .HasColumnType("smallint");

                    b.Property<short>("DF_Total")
                        .HasColumnType("smallint");

                    b.Property<short>("DF_VotosLegenda")
                        .HasColumnType("smallint");

                    b.Property<short>("DF_VotosNominais")
                        .HasColumnType("smallint");

                    b.Property<short>("EleitoresAptos")
                        .HasColumnType("smallint");

                    b.Property<short>("EleitoresFaltosos")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("FechamentoUELog")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("FechamentoUrnaEletronica")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<short>("GO_Brancos")
                        .HasColumnType("smallint");

                    b.Property<short>("GO_EleitoresAptos")
                        .HasColumnType("smallint");

                    b.Property<short>("GO_Nulos")
                        .HasColumnType("smallint");

                    b.Property<short>("GO_Total")
                        .HasColumnType("smallint");

                    b.Property<short>("GO_VotosNominais")
                        .HasColumnType("smallint");

                    b.Property<short>("HabilitadosPorAnoNascimento")
                        .HasColumnType("smallint");

                    b.Property<bool>("LogUrnaInconsistente")
                        .HasColumnType("bit");

                    b.Property<short>("ModeloUrnaEletronica")
                        .HasColumnType("smallint");

                    b.Property<short>("PR_Brancos")
                        .HasColumnType("smallint");

                    b.Property<short>("PR_EleitoresAptos")
                        .HasColumnType("smallint");

                    b.Property<short>("PR_Nulos")
                        .HasColumnType("smallint");

                    b.Property<short>("PR_Total")
                        .HasColumnType("smallint");

                    b.Property<short>("PR_VotosNominais")
                        .HasColumnType("smallint");

                    b.Property<short>("QtdJaVotouLog")
                        .HasColumnType("smallint");

                    b.Property<short>("QtdJustificativasLog")
                        .HasColumnType("smallint");

                    b.Property<bool>("ResultadoSistemaApuracao")
                        .HasColumnType("bit");

                    b.Property<short>("SE_Brancos")
                        .HasColumnType("smallint");

                    b.Property<short>("SE_EleitoresAptos")
                        .HasColumnType("smallint");

                    b.Property<short>("SE_Nulos")
                        .HasColumnType("smallint");

                    b.Property<short>("SE_Total")
                        .HasColumnType("smallint");

                    b.Property<short>("SE_VotosNominais")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Zeresima")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasKey("MunicipioCodigo", "CodigoZonaEleitoral", "CodigoSecao");

                    b.ToTable("SecaoEleitoral");
                });

            modelBuilder.Entity("TSEParser.UnidadeFederativa", b =>
                {
                    b.Property<string>("Sigla")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("RegiaoId")
                        .HasColumnType("tinyint");

                    b.HasKey("Sigla");

                    b.HasIndex("RegiaoId");

                    b.ToTable("UnidadeFederativa");

                    b.HasData(
                        new
                        {
                            Sigla = "PR",
                            Nome = "PARANÁ",
                            RegiaoId = (byte)1
                        },
                        new
                        {
                            Sigla = "RS",
                            Nome = "RIO GRANDE DO SUL",
                            RegiaoId = (byte)1
                        },
                        new
                        {
                            Sigla = "SC",
                            Nome = "SANTA CATARINA",
                            RegiaoId = (byte)1
                        },
                        new
                        {
                            Sigla = "ES",
                            Nome = "ESPÍRITO SANTO",
                            RegiaoId = (byte)2
                        },
                        new
                        {
                            Sigla = "MG",
                            Nome = "MINAS GERAIS",
                            RegiaoId = (byte)2
                        },
                        new
                        {
                            Sigla = "RJ",
                            Nome = "RIO DE JANEIRO",
                            RegiaoId = (byte)2
                        },
                        new
                        {
                            Sigla = "SP",
                            Nome = "SÃO PAULO",
                            RegiaoId = (byte)2
                        },
                        new
                        {
                            Sigla = "DF",
                            Nome = "DISTRITO FEDERAL",
                            RegiaoId = (byte)3
                        },
                        new
                        {
                            Sigla = "GO",
                            Nome = "GOIÁS",
                            RegiaoId = (byte)3
                        },
                        new
                        {
                            Sigla = "MS",
                            Nome = "MATO GROSSO DO SUL",
                            RegiaoId = (byte)3
                        },
                        new
                        {
                            Sigla = "MT",
                            Nome = "MATO GROSSO",
                            RegiaoId = (byte)3
                        },
                        new
                        {
                            Sigla = "AC",
                            Nome = "ACRE",
                            RegiaoId = (byte)4
                        },
                        new
                        {
                            Sigla = "AM",
                            Nome = "AMAZONAS",
                            RegiaoId = (byte)4
                        },
                        new
                        {
                            Sigla = "AP",
                            Nome = "AMAPÁ",
                            RegiaoId = (byte)4
                        },
                        new
                        {
                            Sigla = "PA",
                            Nome = "PARÁ",
                            RegiaoId = (byte)4
                        },
                        new
                        {
                            Sigla = "RO",
                            Nome = "RONDÔNIA",
                            RegiaoId = (byte)4
                        },
                        new
                        {
                            Sigla = "RR",
                            Nome = "RORAIMA",
                            RegiaoId = (byte)4
                        },
                        new
                        {
                            Sigla = "TO",
                            Nome = "TOCANTINS",
                            RegiaoId = (byte)4
                        },
                        new
                        {
                            Sigla = "AL",
                            Nome = "ALAGOAS",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "BA",
                            Nome = "BAHIA",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "CE",
                            Nome = "CEARÁ",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "MA",
                            Nome = "MARANHÃO",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "PB",
                            Nome = "PARAÍBA",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "PE",
                            Nome = "PERNAMBUCO",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "PI",
                            Nome = "PIAUÍ",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "RN",
                            Nome = "RIO GRANDE DO NORTE",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "SE",
                            Nome = "SERGIPE",
                            RegiaoId = (byte)5
                        },
                        new
                        {
                            Sigla = "ZZ",
                            Nome = "EXTERIOR",
                            RegiaoId = (byte)6
                        },
                        new
                        {
                            Sigla = "BR",
                            Nome = "FED - BRASIL",
                            RegiaoId = (byte)0
                        });
                });

            modelBuilder.Entity("TSEParser.VotosLog", b =>
                {
                    b.Property<int>("SecaoEleitoralMunicipioCodigo")
                        .HasColumnType("int")
                        .HasColumnName("MunicipioCodigo");

                    b.Property<short>("SecaoEleitoralCodigoZonaEleitoral")
                        .HasColumnType("smallint")
                        .HasColumnName("CodigoZonaEleitoral");

                    b.Property<short>("SecaoEleitoralCodigoSecao")
                        .HasColumnType("smallint")
                        .HasColumnName("CodigoSecao");

                    b.Property<short>("IdVotoLog")
                        .HasColumnType("smallint");

                    b.Property<int>("CodigoIdentificacaoUrnaEletronica")
                        .HasColumnType("int");

                    b.Property<short>("CodigoSecaoLog")
                        .HasColumnType("smallint");

                    b.Property<short>("CodigoZonaEleitoralLog")
                        .HasColumnType("smallint");

                    b.Property<byte>("DedoBiometria")
                        .HasColumnType("tinyint");

                    b.Property<bool>("EleitorSuspenso")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FimVoto")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("HabilitacaoCancelada")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HabilitacaoUrna")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("InicioVoto")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("JaVotou")
                        .HasColumnType("bit");

                    b.Property<int>("LinhaLog")
                        .HasColumnType("int");

                    b.Property<int>("LinhaLogFim")
                        .HasColumnType("int");

                    b.Property<short>("ModeloUrnaEletronica")
                        .HasColumnType("smallint");

                    b.Property<int>("MunicipioCodigoLog")
                        .HasColumnType("int");

                    b.Property<bool>("PossuiBiometria")
                        .HasColumnType("bit");

                    b.Property<byte>("QtdTeclasIndevidas")
                        .HasColumnType("tinyint");

                    b.Property<short>("ScoreBiometria")
                        .HasColumnType("smallint");

                    b.Property<bool>("UrnaTestada")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoComputado")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoNuloSuspensaoDE")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoNuloSuspensaoDF")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoNuloSuspensaoGO")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoNuloSuspensaoPR")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoNuloSuspensaoSE")
                        .HasColumnType("bit");

                    b.Property<bool>("VotouDE")
                        .HasColumnType("bit");

                    b.Property<bool>("VotouDF")
                        .HasColumnType("bit");

                    b.Property<bool>("VotouGO")
                        .HasColumnType("bit");

                    b.Property<bool>("VotouPR")
                        .HasColumnType("bit");

                    b.Property<bool>("VotouSE")
                        .HasColumnType("bit");

                    b.HasKey("SecaoEleitoralMunicipioCodigo", "SecaoEleitoralCodigoZonaEleitoral", "SecaoEleitoralCodigoSecao", "IdVotoLog");

                    b.ToTable("VotosLog");
                });

            modelBuilder.Entity("TSEParser.VotosMunicipio", b =>
                {
                    b.Property<int>("MunicipioCodigo")
                        .HasColumnType("int")
                        .HasColumnName("MunicipioCodigo");

                    b.Property<byte>("Cargo")
                        .HasColumnType("tinyint");

                    b.Property<int>("NumeroCandidato")
                        .HasColumnType("int");

                    b.Property<long>("QtdVotos")
                        .HasColumnType("bigint");

                    b.Property<bool>("VotoLegenda")
                        .HasColumnType("bit");

                    b.HasKey("MunicipioCodigo", "Cargo", "NumeroCandidato");

                    b.ToTable("VotosMunicipio");
                });

            modelBuilder.Entity("TSEParser.VotosSecao", b =>
                {
                    b.Property<int>("SecaoEleitoralMunicipioCodigo")
                        .HasColumnType("int")
                        .HasColumnName("MunicipioCodigo");

                    b.Property<short>("SecaoEleitoralCodigoZonaEleitoral")
                        .HasColumnType("smallint")
                        .HasColumnName("CodigoZonaEleitoral");

                    b.Property<short>("SecaoEleitoralCodigoSecao")
                        .HasColumnType("smallint")
                        .HasColumnName("CodigoSecao");

                    b.Property<byte>("Cargo")
                        .HasColumnType("tinyint");

                    b.Property<int>("NumeroCandidato")
                        .HasColumnType("int");

                    b.Property<short>("QtdVotos")
                        .HasColumnType("smallint");

                    b.Property<bool>("VotoLegenda")
                        .HasColumnType("bit");

                    b.HasKey("SecaoEleitoralMunicipioCodigo", "SecaoEleitoralCodigoZonaEleitoral", "SecaoEleitoralCodigoSecao", "Cargo", "NumeroCandidato");

                    b.ToTable("VotosSecao");
                });

            modelBuilder.Entity("TSEParser.VotosSecaoRDV", b =>
                {
                    b.Property<int>("SecaoEleitoralMunicipioCodigo")
                        .HasColumnType("int")
                        .HasColumnName("MunicipioCodigo");

                    b.Property<short>("SecaoEleitoralCodigoZonaEleitoral")
                        .HasColumnType("smallint")
                        .HasColumnName("CodigoZonaEleitoral");

                    b.Property<short>("SecaoEleitoralCodigoSecao")
                        .HasColumnType("smallint")
                        .HasColumnName("CodigoSecao");

                    b.Property<short>("IdVotoRDV")
                        .HasColumnType("smallint");

                    b.Property<byte>("Cargo")
                        .HasColumnType("tinyint");

                    b.Property<int>("NumeroCandidato")
                        .HasColumnType("int");

                    b.Property<short>("QtdVotos")
                        .HasColumnType("smallint");

                    b.Property<bool>("VotoBranco")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoLegenda")
                        .HasColumnType("bit");

                    b.Property<bool>("VotoNulo")
                        .HasColumnType("bit");

                    b.HasKey("SecaoEleitoralMunicipioCodigo", "SecaoEleitoralCodigoZonaEleitoral", "SecaoEleitoralCodigoSecao", "IdVotoRDV");

                    b.ToTable("VotosSecaoRDV");
                });

            modelBuilder.Entity("TSEParser.Candidato", b =>
                {
                    b.HasOne("TSEParser.UnidadeFederativa", "UF")
                        .WithMany()
                        .HasForeignKey("UFSigla")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UF");
                });

            modelBuilder.Entity("TSEParser.DefeitosSecao", b =>
                {
                    b.HasOne("TSEParser.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("TSEParser.Municipio", b =>
                {
                    b.HasOne("TSEParser.UnidadeFederativa", "UF")
                        .WithMany()
                        .HasForeignKey("UFSigla")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UF");
                });

            modelBuilder.Entity("TSEParser.SecaoEleitoral", b =>
                {
                    b.HasOne("TSEParser.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("TSEParser.UnidadeFederativa", b =>
                {
                    b.HasOne("TSEParser.Regiao", "Regiao")
                        .WithMany()
                        .HasForeignKey("RegiaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regiao");
                });

            modelBuilder.Entity("TSEParser.VotosLog", b =>
                {
                    b.HasOne("TSEParser.SecaoEleitoral", "SecaoEleitoral")
                        .WithMany()
                        .HasForeignKey("SecaoEleitoralMunicipioCodigo", "SecaoEleitoralCodigoZonaEleitoral", "SecaoEleitoralCodigoSecao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecaoEleitoral");
                });

            modelBuilder.Entity("TSEParser.VotosMunicipio", b =>
                {
                    b.HasOne("TSEParser.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("TSEParser.VotosSecao", b =>
                {
                    b.HasOne("TSEParser.SecaoEleitoral", "SecaoEleitoral")
                        .WithMany()
                        .HasForeignKey("SecaoEleitoralMunicipioCodigo", "SecaoEleitoralCodigoZonaEleitoral", "SecaoEleitoralCodigoSecao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecaoEleitoral");
                });

            modelBuilder.Entity("TSEParser.VotosSecaoRDV", b =>
                {
                    b.HasOne("TSEParser.SecaoEleitoral", "SecaoEleitoral")
                        .WithMany()
                        .HasForeignKey("SecaoEleitoralMunicipioCodigo", "SecaoEleitoralCodigoZonaEleitoral", "SecaoEleitoralCodigoSecao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecaoEleitoral");
                });
#pragma warning restore 612, 618
        }
    }
}
